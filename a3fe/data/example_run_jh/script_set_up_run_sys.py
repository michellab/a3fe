#!/usr/bin/env python3
from __future__ import annotations
import re
import shutil
from pathlib import Path
import subprocess


# === EDIT THESE ROOTS to your environment ===
PROJECT_ROOT = Path("/home/jjhuang/scratch/jjhuang/fep_workflows")   # where systems live (code+inputs)
SCRATCH_ROOT = Path("/home/jjhuang/scratch/jjhuang/fep_workflows")   # where submit.sh cd's into
REPO_ROOT    = Path.cwd()  # run from the repo root that contains `dataset/`

# Template submit.sh (we'll fill {num} and {scratch_path})
SUBMIT_TMPL = """#!/bin/bash
#SBATCH --job-name=sys{num}
#SBATCH --account=rrg-mkoz
#SBATCH --gpus-per-node=1
#SBATCH --cpus-per-task=16
#SBATCH --time=24:00:00
#SBATCH --error=sys{num}-%A.%a.err
#SBATCH --output=sys{num}-%A.%a.out
#SBATCH --mem=8G

# load modules
module --force purge
module load StdEnv/2023
module load gcc/12.3
module load openmpi/4.1.5
module load cuda/12.2
module load gromacs/2024.4

cd {scratch_path}

# initialize and activate conda
. ~/miniconda3/etc/profile.d/conda.sh
conda activate a3fe_gra

export PATH="$CONDA_PREFIX/bin:$PATH"
hash -r

unset LD_LIBRARY_PATH
export LD_LIBRARY_PATH="$CUDA_HOME/lib64"

python run_calc.py
"""

def rewrite_run_calc_py(src_py: Path, dst_py: Path, base_dir: Path, input_dir: Path) -> None:
    """
    Copy run_calc.py and rewrite base_dir and input_dir strings near the end.
    Robust to spacing and different quoting; if not found, appends an override block.
    """
    text = src_py.read_text()
    # Replace calc = a3.Calculation(base_dir="...", input_dir="...")
    # We try to catch either single/double quotes and optional spaces.
    base_re = re.compile(r'(calc\s*=\s*a3\.Calculation\(\s*base_dir\s*=\s*)([\'"]).*?\2', re.DOTALL)
    input_re = re.compile(r'(,\s*input_dir\s*=\s*)([\'"]).*?\2', re.DOTALL)

    replaced = False
    def _sub_base(m):
        nonlocal replaced
        replaced = True
        return f"{m.group(1)}\"{base_dir}\""

    def _sub_input(m):
        return f"{m.group(1)}\"{input_dir}\""

    text2, n1 = base_re.subn(_sub_base, text, count=1)
    text3, n2 = input_re.subn(_sub_input, text2, count=1)

    if n1 == 0 or n2 == 0:
        # Fallback: append an override at the end (safe, explicit)
        append_block = f"""

# --- AUTO-INJECTED PATH OVERRIDES ---
# (Generated by make_systems.py)
calc.base_dir = r"{base_dir}"
calc.input_dir = r"{input_dir}"
"""
        text3 = text + append_block

    dst_py.write_text(text3)

def make_one_system(num: int):
    # Paths
    lig_sdf_name = f"mol{num}_out.sdf"
    dataset_dir  = REPO_ROOT / "dataset"
    ligands_dir  = dataset_dir / "ligands"
    src_lig_sdf  = ligands_dir / lig_sdf_name
    src_prot     = dataset_dir / "protein_final.pdb"
    src_run_somd = dataset_dir / "run_somd.sh"
    src_cfg      = dataset_dir / "template_config.cfg"
    src_calc_py  = dataset_dir / "run_calc.py"

    # Validate sources
    missing = [p for p in [src_lig_sdf, src_prot, src_run_somd, src_cfg, src_calc_py] if not p.exists()]
    if missing:
        raise FileNotFoundError("Missing required template/input(s):\n" + "\n".join(str(m) for m in missing))

    # Create system dirs
    sys_name      = f"system_{num}"
    sys_proj_dir  = PROJECT_ROOT / sys_name
    sys_scratch_dir = SCRATCH_ROOT / sys_name
    sys_input_dir = sys_proj_dir / "input"
    sys_proj_dir.mkdir(parents=True, exist_ok=True)
    sys_input_dir.mkdir(parents=True, exist_ok=True)

    shutil.copy2(src_prot, sys_input_dir / "protein_final.pdb")
    shutil.copy2(src_lig_sdf, sys_input_dir / lig_sdf_name)
    shutil.copy2(sys_input_dir / "protein_final.pdb", sys_input_dir / "protein.pdb")
    shutil.copy2(sys_input_dir / lig_sdf_name,      sys_input_dir / "ligand.sdf")
    shutil.copy2(src_run_somd, sys_input_dir / "run_somd.sh")
    shutil.copy2(src_cfg,      sys_input_dir / "template_config.cfg")

    # submit.sh with correct job name + cd path
    submit_text = SUBMIT_TMPL.format(num=num, scratch_path=str(sys_scratch_dir))
    (sys_proj_dir / "submit.sh").write_text(submit_text)

    # run_calc.py with correct base_dir / input_dir
    rewrite_run_calc_py(
        src_py=src_calc_py,
        dst_py=sys_proj_dir / "run_calc.py",
        base_dir=sys_proj_dir,
        input_dir=sys_input_dir
    )

    print(f"Created {sys_proj_dir}")
    print(f"  input/: protein_final.pdb, protein.pdb, {lig_sdf_name}, ligand.sdf, run_somd.sh, template_config.cfg")
    print(f"  submit.sh (job-name=sys{num}, cd {sys_scratch_dir})")
    print(f"  run_calc.py (base_dir={sys_proj_dir}, input_dir={sys_input_dir})")

def discover_nums_from_dataset() -> list[int]:
    """Find all mol{num}_out.sdf numbers under dataset/ligands/."""
    ligands_dir = REPO_ROOT / "dataset" / "ligands"
    nums = []
    for p in ligands_dir.glob("mol*_out.sdf"):
        m = re.match(r"mol(\d+)_out\.sdf$", p.name)
        if m:
            nums.append(int(m.group(1)))
    return sorted(nums)


def sbatch_submit(system_dir: Path) -> int | None:
    """Run `sbatch submit.sh` in the given system dir. Returns jobid or None on failure."""
    submit_path = system_dir / "submit.sh"
    if not submit_path.exists():
        print(f"[WARN] No submit.sh in {system_dir}, skipping submit.")
        return None
    # Make sure submit.sh is executable
    try:
        submit_path.chmod(0o755)
    except Exception:
        pass
    # Ensure scratch dir exists (the job cd's into it)
    scratch_target = SCRATCH_ROOT / system_dir.name
    scratch_target.mkdir(parents=True, exist_ok=True)
    # Submit
    try:
        res = subprocess.run(
            ["sbatch", "submit.sh"],
            cwd=str(system_dir),
            check=True,
            capture_output=True,
            text=True
        )
        out = (res.stdout or "").strip()
        m = re.search(r"Submitted batch job\s+(\d+)", out)
        jobid = int(m.group(1)) if m else None
        print(f"[SUBMITTED] {system_dir.name} → {out}")
        return jobid
    except FileNotFoundError:
        print("[ERROR] `sbatch` not found on PATH.")
        return None
    except subprocess.CalledProcessError as e:
        msg = (e.stdout or "") + "\n" + (e.stderr or "")
        print(f"[ERROR] sbatch failed for {system_dir}: \n{msg}")
        return None


if __name__ == "__main__":
    import argparse
    ap = argparse.ArgumentParser(description="Create system_{num} directories with inputs and scripts.")
    ap.add_argument("--nums", nargs="*", type=int,
                    help="Specific mol numbers (e.g., 1 2 64). Overrides --range.")
    ap.add_argument("--range", nargs=2, type=int, metavar=("START", "END"),
                    help="Inclusive numeric range for mol numbers (e.g., 10 20).")
    ap.add_argument("--submit-only-range", nargs=2, type=int, metavar=("START","END"),
                    help="Submit existing PROJECT_ROOT/system_{num} for START..END (no creation).")
    ap.add_argument("--submit-only-nums", nargs="*", type=int,
                help="Submit existing PROJECT_ROOT/system_{num} for these nums (e.g., 2 5 9). No creation.")

    args = ap.parse_args()

    # ---- SUBMIT-ONLY MODE (no creation) ----
    if args.submit_only_range:
        start, end = args.submit_only_range
        if start > end:
            start, end = end, start
        nums = list(range(start, end + 1))
    
        systems = []
        for n in nums:
            d = PROJECT_ROOT / f"system_{n}"
            sub = d / "submit.sh"
            if sub.exists():
                systems.append(d)
            else:
                print(f"[WARN] {d} has no submit.sh — skipping (submit-only mode never creates anything)")
    
        if not systems:
            raise SystemExit("[INFO] No existing systems with submit.sh found in the requested range.")
    
        print(f"[INFO] Submit-only mode: will submit {len(systems)} systems")
        for d in systems:
            print("  -", d)
    
        import shutil as _shutil
        if _shutil.which("sbatch") is None:
            raise SystemExit("[ERROR] sbatch not found on PATH; cannot submit.")
    
        for d in systems:
            sbatch_submit(d) 
        raise SystemExit(0)     # IMPORTANT: exit so we don't fall through to creation

    # ---- SUBMIT-ONLY (explicit nums, no creation) ----
    if args.submit_only_nums:
        nums = sorted(set(args.submit_only_nums))
        systems = []
        for n in nums:
            d = PROJECT_ROOT / f"system_{n}"
            sub = d / "submit.sh"
            if sub.exists():
                systems.append(d)
            else:
                print(f"[WARN] {d} has no submit.sh — skipping (submit-only mode never creates anything)")

        if not systems:
            raise SystemExit("[INFO] No existing systems with submit.sh found for the requested nums.")

        print(f"[INFO] Submit-only mode: will submit {len(systems)} systems")
        for d in systems:
            print("  -", d)

        import shutil as _shutil
        if _shutil.which("sbatch") is None:
            raise SystemExit("[ERROR] sbatch not found on PATH; cannot submit.")

        for d in systems:
            sbatch_submit(d)
        raise SystemExit(0)  # IMPORTANT: exit so we don't fall through to creation

    if args.nums:
        nums = args.nums
    elif args.range:
        start, end = args.range
        if start > end:
            start, end = end, start
        nums = list(range(start, end + 1))
    else:
        nums = discover_nums_from_dataset()

    if not nums:
        raise SystemExit("No mol{num}_out.sdf found for the requested numbers.")

    for n in nums:
        make_one_system(n)

